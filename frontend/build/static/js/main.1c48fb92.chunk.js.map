{"version":3,"sources":["logo.svg","config.js","chatWindow.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","aws_exports","Auth","region","userPoolId","userPoolWebClientId","mandatorySignIn","authenticationFlowType","ws","ChatWindow","props","_useState","useState","_useState2","Object","slicedToArray","messageList","setMessageList","_useState3","_useState4","badge","setBadge","_useState5","_useState6","isOpen","setIsOpen","username","authData","useEffect","Sockette","signInUserSession","accessToken","jwtToken","timeout","maxAttempts","onopen","e","console","log","onmessage","onMessageReceied","onreconnect","onmaximum","onclose","onerror","close","_ref","data","_JSON$parse","JSON","parse","author","type","messageData","isMe","concat","toConsumableArray","react_default","a","createElement","es","agentProfile","teamName","imageUrl","onMessageWasSent","message","newMessage","objectSpread","json","action","stringify","handleClick","showEmoji","newMessagesCount","Amplify","configure","App","className","src","logo","alt","href","target","rel","chatWindow","this","Component","withAuthenticator","includeGreetings","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c48fb92.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","const aws_exports = {\r\n  Auth: {\r\n    region: \"ap-southeast-1\",\r\n    userPoolId: \"ap-southeast-1_QKqrmYq2d\",\r\n    userPoolWebClientId: \"5u0q954nemam8dbb2r3rlsi86a\",\r\n    mandatorySignIn: false,\r\n    authenticationFlowType: \"USER_SRP_AUTH\"\r\n  }\r\n};\r\n\r\nexport default aws_exports;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Launcher } from \"react-chat-window\";\r\nimport Sockette from \"sockette\";\r\nlet ws = null;\r\n\r\nconst ChatWindow = props => {\r\n  const [messageList, setMessageList] = useState([]);\r\n  const [badge, setBadge] = useState(0);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const { username } = props.authData;\r\n\r\n  useEffect(\r\n    () => {\r\n      if (props.authData)\r\n        ws = new Sockette(\r\n          \"wss://sxaylxqkbj.execute-api.ap-southeast-1.amazonaws.com/dev?token=\" +\r\n            props.authData.signInUserSession.accessToken.jwtToken,\r\n          {\r\n            timeout: 5e3,\r\n            maxAttempts: 1,\r\n            onopen: e => console.log(\"connected:\", e),\r\n            onmessage: e => onMessageReceied(e),\r\n            onreconnect: e => console.log(\"Reconnecting...\", e),\r\n            onmaximum: e => console.log(\"Stop Attempting!\", e),\r\n            onclose: e => console.log(\"Closed!\", e),\r\n            onerror: e => console.log(\"Error:\", e)\r\n          }\r\n        );\r\n      return function cleanup() {\r\n        ws && ws.close();\r\n        ws = null;\r\n      };\r\n    },\r\n    [messageList]\r\n  );\r\n\r\n  const handleClick = () => {\r\n    setIsOpen(!isOpen);\r\n    setBadge(0);\r\n  };\r\n\r\n  const onMessageWasSent = message => {\r\n    const newMessage = { ...message, author: username };\r\n    ws.json({\r\n      action: \"sendMessage\",\r\n      data: JSON.stringify(newMessage)\r\n    });\r\n  };\r\n\r\n  const onMessageReceied = ({ data }) => {\r\n    const { author, type, data: messageData } = JSON.parse(data);\r\n    const isMe = username === author ? \"me\" : \"them\";\r\n    if (!isOpen) {\r\n      setBadge(+badge + 1);\r\n    }\r\n    setMessageList([\r\n      ...messageList,\r\n      {\r\n        author: isMe,\r\n        type,\r\n        data: messageData\r\n      }\r\n    ]);\r\n  };\r\n  return (\r\n    <div>\r\n      <Launcher\r\n        agentProfile={{\r\n          teamName: \"react-live-chat\",\r\n          imageUrl:\r\n            \"https://a.slack-edge.com/66f9/img/avatars-teams/ava_0001-34.png\"\r\n        }}\r\n        onMessageWasSent={onMessageWasSent}\r\n        messageList={messageList}\r\n        handleClick={handleClick}\r\n        isOpen={isOpen}\r\n        showEmoji\r\n        newMessagesCount={badge}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;\r\n","import React, { Component } from \"react\";\r\nimport Amplify from \"aws-amplify\";\r\nimport { withAuthenticator } from \"aws-amplify-react\";\r\nimport aws_exports from \"./config\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport ChatWindow from \"./chatWindow\";\r\n\r\nAmplify.configure(aws_exports);\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <p>\r\n            Edit <code>src/App.js</code> and save to reload.\r\n          </p>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://reactjs.org\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Learn React\r\n          </a>\r\n        </header>\r\n        <ChatWindow {...this.props} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withAuthenticator(App, { includeGreetings: true }, false);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}